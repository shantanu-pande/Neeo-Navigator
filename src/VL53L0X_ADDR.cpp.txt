#include <Arduino.h>
#include <Wire.h>

// VL53L0X I2C address
// #define VL53L0X_ADDR 0x29

// VL53L0X register addresses
#define SYSRANGE_START                              0x00
#define SYSTEM_THRESH_HIGH                          0x0C
#define SYSTEM_THRESH_LOW                           0x0E
#define SYSTEM_SEQUENCE_CONFIG                      0x01
#define SYSTEM_RANGE_CONFIG                         0x09
#define SYSTEM_INTERMEASUREMENT_PERIOD              0x04
#define SYSTEM_INTERRUPT_CONFIG_GPIO                0x0A
#define GPIO_HV_MUX_ACTIVE_HIGH                     0x84
#define SYSTEM_INTERRUPT_CLEAR                      0x0B
#define RESULT_INTERRUPT_STATUS                     0x13
#define RESULT_RANGE_STATUS                         0x14
#define RESULT_CORE_AMBIENT_WINDOW_EVENTS_RTN       0xBC
#define RESULT_CORE_RANGING_TOTAL_EVENTS_RTN        0xC0
#define RESULT_CORE_AMBIENT_WINDOW_EVENTS_REF       0xD0
#define RESULT_CORE_RANGING_TOTAL_EVENTS_REF        0xD4
#define RESULT_PEAK_SIGNAL_RATE_REF                 0xB6
#define ALGO_PART_TO_PART_RANGE_OFFSET_MM           0x28
#define I2C_SLAVE_DEVICE_ADDRESS                    0x8A
#define MSRC_CONFIG_CONTROL                         0x60
#define PRE_RANGE_CONFIG_MIN_SNR                    0x27
#define PRE_RANGE_CONFIG_VALID_PHASE_LOW            0x56
#define PRE_RANGE_CONFIG_VALID_PHASE_HIGH           0x57
#define PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT          0x64
#define FINAL_RANGE_CONFIG_MIN_SNR                  0x67
#define FINAL_RANGE_CONFIG_VALID_PHASE_LOW          0x47
#define FINAL_RANGE_CONFIG_VALID_PHASE_HIGH         0x48
#define FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT 0x44
#define FINAL_RANGE_CONFIG_VCSEL_PERIOD             0x70
#define FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI        0x71
#define FINAL_RANGE_CONFIG_TIMEOUT_MACROP_LO        0x72
#define GLOBAL_CONFIG_VCSEL_WIDTH                   0x32
#define RESULT_RANGE_STATUS                         0x14
#define VL53L0X_EXPECTED_DEVICE_ID                  0xEE
#define VL53L0X_IDENTIFICATION_MODEL_ID             0xC0
#define VL53L0X_IDENTIFICATION_REVISION_ID          0xC2
#define VL53L0X_PRE_RANGE_CONFIG_VCSEL_PERIOD       0x50
#define VL53L0X_FINAL_RANGE_CONFIG_VCSEL_PERIOD     0x70
#define VL53L0X_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI  0x51
#define VL53L0X_PRE_RANGE_CONFIG_TIMEOUT_MACROP_LO  0x52
#define VL53L0X_SYSTEM_HISTOGRAM_BIN                0x81
#define VL53L0X_HISTOGRAM_CONFIG_INITIAL_PHASE_SELECT 0x33
#define VL53L0X_HISTOGRAM_CONFIG_READOUT_CTRL       0x55
#define VL53L0X_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI 0x71
#define VL53L0X_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_LO 0x72
#define VL53L0X_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS 0x20
#define VL53L0X_MSRC_CONFIG_TIMEOUT_MACROP          0x46

// Create I2C3 instance
TwoWire Wire3(PB4, PA8); // SDA=PB4, SCL=PA8

// Function prototypes
bool initVL53L0X();
uint16_t readDistance();
void writeReg(uint8_t reg, uint8_t value);
uint8_t readReg(uint8_t reg);
void writeReg16(uint8_t reg, uint16_t value);
uint16_t readReg16(uint8_t reg);
bool changeI2CAddress(uint8_t newAddress);

// Global variable for VL53L0X address
uint8_t VL53L0X_ADDR = 0x29;


void setup() {
  // Initialize Serial1 on pins A9 (TX) and A10 (RX)
  Serial1.begin(115200);
  
  // Initialize I2C3 communication
  Wire3.begin();
  Wire3.setClock(400000); // 400kHz for faster communication
  
  // Wait for serial connection
  delay(2000);
  
  Serial1.println("VL53L0X Distance Sensor - I2C3 (SDA=PB4, SCL=PA8)");
  Serial1.println("=================================================");
  
  // Initialize VL53L0X sensor
  if (initVL53L0X()) {
    Serial1.println("VL53L0X initialized successfully!");
    Serial1.println("Starting continuous distance measurements...\n");
    // uint8_t VL53L0X_ADDR = 0x29

    // Change I2C address if needed (example: change to 0x30)
    if (changeI2CAddress(0x30)) {
      // Update the global address variable if you want to continue using this sensor
      VL53L0X_ADDR = 0x30; // You'd need to make this variable instead of #define
    }


  } else {
    Serial1.println("Failed to initialize VL53L0X!");
    Serial1.println("Check connections and power supply.");
    while(1); // Stop execution
  }
}

void loop() {
  // Read distance
  uint16_t distance = readDistance();
  
  // Print distance with precision
  Serial1.print("Distance: ");
  // Serial1.print(VL53L0X_ADDR, HEX);
  
  if (distance == 0) {
    Serial1.println("Out of range or error");
  } else if (distance > 2000) {
    Serial1.println("Out of range (>2000mm)");
  } else {
    Serial1.print(distance);
    Serial1.print(" mm (");
    Serial1.print(distance / 10.0, 1);
    Serial1.println(" cm)");
  }
  
  delay(100); // Continuous reading every 100ms
}

bool initVL53L0X() {
  // Check if device is present
  uint8_t deviceId = readReg(VL53L0X_IDENTIFICATION_MODEL_ID);
  if (deviceId != VL53L0X_EXPECTED_DEVICE_ID) {
    Serial1.print("Wrong device ID: 0x");
    Serial1.println(deviceId, HEX);
    return false;
  }
  
  // VL53L0X initialization sequence
  writeReg(0x88, 0x00);
  writeReg(0x80, 0x01);
  writeReg(0xFF, 0x01);
  writeReg(0x00, 0x00);
  writeReg(0x91, 0x3c);
  writeReg(0x00, 0x01);
  writeReg(0xFF, 0x00);
  writeReg(0x80, 0x00);
  
  // Set I2C standard mode
  writeReg(0x88, 0x00);
  
  writeReg(0x80, 0x01);
  writeReg(0xFF, 0x01);
  writeReg(0x00, 0x00);
  writeReg(0x91, 0x3C);
  writeReg(0x00, 0x01);
  writeReg(0xFF, 0x00);
  writeReg(0x80, 0x00);
  
  // Enable continuous mode
  writeReg(SYSRANGE_START, 0x02);
  
  return true;
}

uint16_t readDistance() {
  // Start ranging
  writeReg(SYSRANGE_START, 0x01);
  
  // Wait for measurement to complete
  uint8_t status;
  do {
    status = readReg(RESULT_RANGE_STATUS);
    delay(1);
  } while ((status & 0x01) == 0);
  
  // Read distance
  uint16_t distance = readReg16(RESULT_RANGE_STATUS + 10);
  
  // Clear interrupt
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
  
  return distance;
}

void writeReg(uint8_t reg, uint8_t value) {
  Wire3.beginTransmission(VL53L0X_ADDR);
  Wire3.write(reg);
  Wire3.write(value);
  Wire3.endTransmission();
}

uint8_t readReg(uint8_t reg) {
  Wire3.beginTransmission(VL53L0X_ADDR);
  Wire3.write(reg);
  Wire3.endTransmission(false);
  Wire3.requestFrom(VL53L0X_ADDR, 1);
  return Wire3.read();
}

void writeReg16(uint8_t reg, uint16_t value) {
  Wire3.beginTransmission(VL53L0X_ADDR);
  Wire3.write(reg);
  Wire3.write((value >> 8) & 0xFF);
  Wire3.write(value & 0xFF);
  Wire3.endTransmission();
}

uint16_t readReg16(uint8_t reg) {
  Wire3.beginTransmission(VL53L0X_ADDR);
  Wire3.write(reg);
  Wire3.endTransmission(false);
  Wire3.requestFrom(VL53L0X_ADDR, 2);
  return (Wire3.read() << 8) | Wire3.read();
}


bool changeI2CAddress(uint8_t newAddress) {
  // Validate new address (must be 7-bit address, so between 0x08 and 0x77)
  if (newAddress < 0x08 || newAddress > 0x77) {
    Serial1.println("Invalid I2C address! Must be between 0x08 and 0x77");
    return false;
  }
  
  // Check if device is present at current address
  uint8_t deviceId = readReg(VL53L0X_IDENTIFICATION_MODEL_ID);
  if (deviceId != VL53L0X_EXPECTED_DEVICE_ID) {
    Serial1.println("VL53L0X not found at current address!");
    return false;
  }
  
  // Write the new I2C address to the device
  writeReg(I2C_SLAVE_DEVICE_ADDRESS, newAddress);
  
  // Small delay to ensure the change takes effect
  delay(10);
  
  // Verify the address change by reading from the new address
  Wire3.beginTransmission(newAddress);
  Wire3.write(VL53L0X_IDENTIFICATION_MODEL_ID);
  Wire3.endTransmission(false);
  Wire3.requestFrom(newAddress, 1);
  
  if (Wire3.available()) {
    uint8_t verifyId = Wire3.read();
    if (verifyId == VL53L0X_EXPECTED_DEVICE_ID) {
      Serial1.print("Successfully changed I2C address to: 0x");
      Serial1.println(newAddress, HEX);
      return true;
    }
  }
  
  Serial1.println("Failed to verify new I2C address!");
  return false;
}
